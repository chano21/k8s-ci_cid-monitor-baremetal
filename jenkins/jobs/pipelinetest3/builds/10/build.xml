<?xml version='1.1' encoding='UTF-8'?>
<flow-build plugin="workflow-job@2.40">
  <actions>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.model.Cause_-UserIdCause>
            <userId>chano21</userId>
          </hudson.model.Cause_-UserIdCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="workflow-cps-global-lib@2.17">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
    <org.jenkinsci.plugins.workflow.cps.EnvActionImpl plugin="workflow-cps@2.83">
      <env class="tree-map"/>
    </org.jenkinsci.plugins.workflow.cps.EnvActionImpl>
    <jenkins.model.InterruptedBuildAction>
      <causes class="com.google.common.collect.ImmutableList">
        <jenkins.model.CauseOfInterruption_-UserInterruption>
          <user>chano21</user>
        </jenkins.model.CauseOfInterruption_-UserInterruption>
      </causes>
    </jenkins.model.InterruptedBuildAction>
  </actions>
  <queueId>3</queueId>
  <timestamp>1603796077917</timestamp>
  <startTime>1603796077956</startTime>
  <result>ABORTED</result>
  <duration>5953</duration>
  <charset>UTF-8</charset>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>ABORTED</result>
    <script>/* pipeline 변수 설정 */
def DOCKER_IMAGE_NAME = &quot;chano22/dockerhub&quot;           // 생성하는 Docker image 이름
def DOCKER_IMAGE_TAGS = &quot;test&quot;  // 생성하는 Docker image 태그
def NAMESPACE = &quot;pco&quot;
def VERSION = &quot;${env.BUILD_NUMBER}&quot;
def DATE = new Date();
  
podTemplate(label: &apos;builder&apos;,
            containers: [
             //   containerTemplate(name: &apos;gradle&apos;, image: &apos;gradle:5.6-jdk8&apos;, command: &apos;cat&apos;, ttyEnabled: true),
                containerTemplate(name: &apos;docker&apos;, image: &apos;docker&apos;, command: &apos;cat&apos;, ttyEnabled: true),
                containerTemplate(name: &apos;kubectl&apos;, image: &apos;lachlanevenson/k8s-kubectl:v1.15.3&apos;, command: &apos;cat&apos;, ttyEnabled: true)
            ],
            volumes: [
           //     hostPathVolume(mountPath: &apos;/home/gradle/.gradle&apos;, hostPath: &apos;/home/admin/k8s/jenkins/.gradle&apos;),
                hostPathVolume(mountPath: &apos;/var/run/docker.sock&apos;, hostPath: &apos;/var/run/docker.sock&apos;),
                //hostPathVolume(mountPath: &apos;/usr/bin/docker&apos;, hostPath: &apos;/usr/bin/docker&apos;)
            ]) {
    node(&apos;builder&apos;) {
        stage(&apos;Checkout&apos;) {
             checkout scm   // gitlab으로부터 소스 다운
        }
        stage(&apos;Build&apos;) {
//           container(&apos;gradle&apos;) {
              /* 도커 이미지를 활용하여 gradle 빌드를 수행하여 ./build/libs에 jar파일 생성 */
//             sh &quot;gradle -x test build&quot;
//           }
        }
        stage(&apos;Docker build&apos;) {
            container(&apos;docker&apos;) {
                withCredentials([usernamePassword(
                    credentialsId: &apos;docker_hub_auth&apos;,
                    usernameVariable: &apos;USERNAME&apos;,
                    passwordVariable: &apos;PASSWORD&apos;)]) {
                        /* ./build/libs 생성된 jar파일을 도커파일을 활용하여 도커 빌드를 수행한다 */
                        sh &quot;docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAGS} .&quot;
                        sh &quot;docker login -u ${USERNAME} -p ${PASSWORD}&quot;
                        sh &quot;docker push ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAGS}&quot;
                }
            }
        }
        stage(&apos;Run kubectl&apos;) {
            container(&apos;kubectl&apos;) {
                withCredentials([usernamePassword(
                    credentialsId: &apos;docker_hub_auth&apos;,
                    usernameVariable: &apos;USERNAME&apos;,
                    passwordVariable: &apos;PASSWORD&apos;)]) {
                        /* namespace 존재여부 확인. 미존재시 namespace 생성 */
                        sh &quot;kubectl get ns ${NAMESPACE}|| kubectl create ns ${NAMESPACE}&quot;

                        /* secret 존재여부 확인. 미존재시 secret 생성 */
                        sh &quot;&quot;&quot;
                            kubectl get secret my-secret -n ${NAMESPACE} || \
                            kubectl create secret docker-registry my-secret \
                            --docker-server=https://index.docker.io/v1/ \
                            --docker-username=${USERNAME} \
                            --docker-password=${PASSWORD} \
                            --docker-email=ekfrl2815@gmail.com \
                            -n ${NAMESPACE}
                        &quot;&quot;&quot;
                        /* k8s-deployment.yaml 의 env값을 수정해준다(DATE로). 배포시 수정을 해주지 않으면 변경된 내용이 정상 배포되지 않는다. */
                        /*sh &quot;echo ${VERSION}&quot;
                        sh &quot;sed -i.bak &apos;s#VERSION_STRING#${VERSION}#&apos; ./kubernetes/deployment.yaml&quot;*/
                        sh &quot;echo ${DATE}&quot;
                        sh &quot;sed -i.bak &apos;s#DATE_STRING#${DATE}#&apos; ./kubernetes/deployment.yaml&quot;

                        /* yaml파일로 배포를 수행한다 */
                        sh &quot;kubectl apply -f ./kubernetes/deployment -n ${NAMESPACE}&quot;
                        sh &quot;kubectl apply -f ./kubernetes/deployment -n ${NAMESPACE}&quot;
                }
            }
        }
    }
}</script>
    <loadedScripts class="map"/>
    <durabilityHint>MAX_SURVIVABILITY</durabilityHint>
    <timings class="map">
      <entry>
        <string>flowNode</string>
        <long>159714021</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>1103982014</long>
      </entry>
      <entry>
        <string>run</string>
        <long>301831653</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>761215217</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>10345687</long>
      </entry>
    </timings>
    <sandbox>true</sandbox>
    <iota>9</iota>
    <head>1:9</head>
    <done>true</done>
    <resumeBlocked>false</resumeBlocked>
  </execution>
  <completed>true</completed>
  <checkouts class="hudson.util.PersistedList"/>
</flow-build>